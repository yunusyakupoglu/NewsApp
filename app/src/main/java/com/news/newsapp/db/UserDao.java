package com.news.newsapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Last_name = new Property(1, String.class, "last_name", false, "LAST_NAME");
        public final static Property First_name = new Property(2, String.class, "first_name", false, "FİRST_NAME");
        public final static Property Username = new Property(3, String.class, "username", false, "USERNAME");
        public final static Property Email = new Property(4, String.class, "email", false, "EMAİL");
        public final static Property Password = new Property(5, String.class, "password", false, "PASSWORD");
        public final static Property Is_active_user = new Property(6, Boolean.class, "is_active_user", false, "İS_ACTİVE_USER");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LAST_NAME\" TEXT NOT NULL ," + // 1: last_name
                "\"FİRST_NAME\" TEXT NOT NULL ," + // 2: first_name
                "\"USERNAME\" TEXT NOT NULL ," + // 3: username
                "\"EMAİL\" TEXT NOT NULL ," + // 4: email
                "\"PASSWORD\" TEXT NOT NULL ," + // 5: password
                "\"İS_ACTİVE_USER\" INTEGER);"); // 6: is_active_user
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getLast_name());
        stmt.bindString(3, entity.getFirst_name());
        stmt.bindString(4, entity.getUsername());
        stmt.bindString(5, entity.getEmail());
        stmt.bindString(6, entity.getPassword());
 
        Boolean is_active_user = entity.getIs_active_user();
        if (is_active_user != null) {
            stmt.bindLong(7, is_active_user ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getLast_name());
        stmt.bindString(3, entity.getFirst_name());
        stmt.bindString(4, entity.getUsername());
        stmt.bindString(5, entity.getEmail());
        stmt.bindString(6, entity.getPassword());
 
        Boolean is_active_user = entity.getIs_active_user();
        if (is_active_user != null) {
            stmt.bindLong(7, is_active_user ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // last_name
            cursor.getString(offset + 2), // first_name
            cursor.getString(offset + 3), // username
            cursor.getString(offset + 4), // email
            cursor.getString(offset + 5), // password
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // is_active_user
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLast_name(cursor.getString(offset + 1));
        entity.setFirst_name(cursor.getString(offset + 2));
        entity.setUsername(cursor.getString(offset + 3));
        entity.setEmail(cursor.getString(offset + 4));
        entity.setPassword(cursor.getString(offset + 5));
        entity.setIs_active_user(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
