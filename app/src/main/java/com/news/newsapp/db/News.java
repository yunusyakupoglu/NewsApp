package com.news.newsapp.db;

import org.greenrobot.greendao.annotation.*;

import com.news.newsapp.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "NEWS".
 */
@Entity(active = true)
public class News {

    @Id(autoincrement = true)
    private Long id;

    @NotNull
    private String news_title;

    @NotNull
    private String news_content;
    private Boolean is_active_news;
    private long category_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient NewsDao myDao;

    @ToOne(joinProperty = "category_id")
    private Category category;

    @Generated
    private transient Long category__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public News() {
    }

    public News(Long id) {
        this.id = id;
    }

    @Generated
    public News(Long id, String news_title, String news_content, Boolean is_active_news, long category_id) {
        this.id = id;
        this.news_title = news_title;
        this.news_content = news_content;
        this.is_active_news = is_active_news;
        this.category_id = category_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNewsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getNews_title() {
        return news_title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNews_title(@NotNull String news_title) {
        this.news_title = news_title;
    }

    @NotNull
    public String getNews_content() {
        return news_content;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNews_content(@NotNull String news_content) {
        this.news_content = news_content;
    }

    public Boolean getIs_active_news() {
        return is_active_news;
    }

    public void setIs_active_news(Boolean is_active_news) {
        this.is_active_news = is_active_news;
    }

    public long getCategory_id() {
        return category_id;
    }

    public void setCategory_id(long category_id) {
        this.category_id = category_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Category getCategory() {
        long __key = this.category_id;
        if (category__resolvedKey == null || !category__resolvedKey.equals(__key)) {
            __throwIfDetached();
            CategoryDao targetDao = daoSession.getCategoryDao();
            Category categoryNew = targetDao.load(__key);
            synchronized (this) {
                category = categoryNew;
            	category__resolvedKey = __key;
            }
        }
        return category;
    }

    @Generated
    public void setCategory(Category category) {
        if (category == null) {
            throw new DaoException("To-one property 'category_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.category = category;
            category_id = category.getId();
            category__resolvedKey = category_id;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
