package com.news.newsapp.db;

import org.greenrobot.greendao.annotation.*;

import com.news.newsapp.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "NEWS_ASSETS".
 */
@Entity(active = true)
public class news_assets {

    @Id(autoincrement = true)
    private Long id;

    @NotNull
    private String news_assets_file_path;
    private Boolean is_active_news_assets;
    private long news_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient news_assetsDao myDao;

    @ToOne(joinProperty = "news_id")
    private News news;

    @Generated
    private transient Long news__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public news_assets() {
    }

    public news_assets(Long id) {
        this.id = id;
    }

    @Generated
    public news_assets(Long id, String news_assets_file_path, Boolean is_active_news_assets, long news_id) {
        this.id = id;
        this.news_assets_file_path = news_assets_file_path;
        this.is_active_news_assets = is_active_news_assets;
        this.news_id = news_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNews_assetsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getNews_assets_file_path() {
        return news_assets_file_path;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNews_assets_file_path(@NotNull String news_assets_file_path) {
        this.news_assets_file_path = news_assets_file_path;
    }

    public Boolean getIs_active_news_assets() {
        return is_active_news_assets;
    }

    public void setIs_active_news_assets(Boolean is_active_news_assets) {
        this.is_active_news_assets = is_active_news_assets;
    }

    public long getNews_id() {
        return news_id;
    }

    public void setNews_id(long news_id) {
        this.news_id = news_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public News getNews() {
        long __key = this.news_id;
        if (news__resolvedKey == null || !news__resolvedKey.equals(__key)) {
            __throwIfDetached();
            NewsDao targetDao = daoSession.getNewsDao();
            News newsNew = targetDao.load(__key);
            synchronized (this) {
                news = newsNew;
            	news__resolvedKey = __key;
            }
        }
        return news;
    }

    @Generated
    public void setNews(News news) {
        if (news == null) {
            throw new DaoException("To-one property 'news_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.news = news;
            news_id = news.getId();
            news__resolvedKey = news_id;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
